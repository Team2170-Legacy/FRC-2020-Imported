// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Feeder.h"
#include "Constants.h"
#include "frc/Preferences.h"

Feeder::Feeder() :
    kRotateRPM(frc::Preferences::GetInstance()->GetDouble("Feeder RPM", 10.0)),
    kP(frc::Preferences::GetInstance()->GetDouble("Feeder kP", 0.0)),
    kFF(frc::Preferences::GetInstance()->GetDouble("Feeder kFF", 0.05)),
    kMaxAccel(frc::Preferences::GetInstance()->GetDouble("Feeder Accel", 10.0))

  {
    m_storageEncoder.SetVelocityConversionFactor(ShooterContants::kChainReduction 
        / ShooterContants::kGearRatio);
    m_pidStorageController.SetFF(kFF);
    m_pidStorageController.SetP(kP);
    m_pidStorageController.SetSmartMotionMaxVelocity(30.0);
    m_pidStorageController.SetSmartMotionMaxAccel(kMaxAccel);
}

void Feeder::Periodic() {

}

void Feeder::RotateCW(){
    m_pidStorageController.SetReference(kRotateRPM, rev::ControlType::kSmartVelocity);
}

void Feeder::RotateCW(double rpm) {
    m_pidStorageController.SetReference(rpm, rev::ControlType::kSmartVelocity);
}

void Feeder::RotateCCW(){
    m_pidStorageController.SetReference(-kRotateRPM, rev::ControlType::kSmartVelocity);
}

void Feeder::RotateCCW(double rpm) {
    m_pidStorageController.SetReference(-rpm, rev::ControlType::kSmartVelocity);
}

void Feeder::FeedStop(){
    m_pidStorageController.SetReference(0.0, rev::ControlType::kSmartVelocity);
}

void Feeder::Agitate(){
    if(fabs(m_storageEncoder.GetVelocity()) < 5.0){
        RotateCCW();
    } else {
        RotateCW();
    }
}

