// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#pragma once

#include "frc2/command/SubsystemBase.h"
#include "rev/CANSparkMax.h"
#include "ctre/Phoenix.h"
#include "frc/Preferences.h"
#include "hwcfg.h"
#include "DataLogger.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

#define DEFAULT_SHOOTER_VELOCITY 3000.0
#define HIGH_SHOOTER_POSITION

/**
 *
 *
 * @author ExampleAuthor
 */
class Shooter: public frc2::SubsystemBase {
private:
	const double kGearRatio = 1.0;
	rev::CANSparkMax m_shooterLead{CANIDs::kShooterMotorID, rev::CANSparkMax::MotorType::kBrushless};
	rev::CANEncoder m_shooterEncoderLead{m_shooterLead.GetEncoder()};
	rev::CANPIDController m_pidShooterMotorLead{m_shooterLead.GetPIDController()};

	rev::CANSparkMax m_shooterFollow{CANIDs::kShooterMotorID2, rev::CANSparkMax::MotorType::kBrushless};

	// PID Gains for closed-loop velocity control
	const double kP, kI = 0, kD = 0, kIz = 0, kFF, kMaxOutput = 1, kMinOutput = 0;	

	// Max RPM for motors
	const double maxRPM;
	const double maxAccel;
	double CommandedVelocity = 0.0;
	bool ShooterEnabled = false;
	void SetShooterSpeed(double velocity);
	
	// linear actuators for the hood
	WPI_TalonSRX m_shooterActuator{CANIDs::kShooterActuatorID};
	
	// mm
	const double minHoodPosition = 0;
	const double maxHoodPosition = 150;

	const double initialHoodPosition;

	double hoodPositionSetpoint;
	double hoodPosition;

	// actuator has no encoder, movements are based on time
	const double actuatorMillimetersPerSecond;	

	// Logger object
	DataLogger shooterLogger;



public:
Shooter();
	void Periodic() override;

	// shooter flywheel methods
	void ShooterOff(void);
	void ShooterOn(double velocity = DEFAULT_SHOOTER_VELOCITY);
	bool IsShooterOn() {return ShooterEnabled;}
	double GetShooterSpeed() {return CommandedVelocity;}
	double GetMotorVelocity() {return m_shooterEncoderLead.GetVelocity();}
	bool ShooterAtSpeed();

	// hood methods
	void SetHoodCustomPosition(double mm);
	double GetHoodPositionSetpoint();
	double GetHoodPosition();
	bool HoodAtPosition();
	void StopHoodActuator();
	void ResetCurrentHoodPositionValue(); 

	// shooter configurations, a configuration coressponds to a hood position and a flywheel speed
	enum ShooterConfiguration {
		LowShooter_2020, // Low shooter from 2020 season
		HighShooter_2020, // High shooter from 2020 season
		Zone1, // for at home challenges 2021
		Zone2,
		Zone3,
		Zone4,
		CustomConfiguration = -1
	};

	// millimeters
	std::vector<double> hoodPositions = {
		0, 
		127, 
		frc::Preferences::GetInstance()->GetDouble("Zone 1 Hood Height", 0),
		frc::Preferences::GetInstance()->GetDouble("Zone 2 Hood Height", 120),
		frc::Preferences::GetInstance()->GetDouble("Zone 3 Hood Height", 130), 
		frc::Preferences::GetInstance()->GetDouble("Zone 4 Hood Height", 150)
		};


	// RPMS
	std::vector<double> flywheelSpeeds = {
		frc::Preferences::GetInstance()->GetDouble("Low Shooter Speed", DEFAULT_SHOOTER_VELOCITY),
		frc::Preferences::GetInstance()->GetDouble("High Shooter Speed", 4000),
		frc::Preferences::GetInstance()->GetDouble("Zone 1 Shooter Speed", DEFAULT_SHOOTER_VELOCITY),
		frc::Preferences::GetInstance()->GetDouble("Zone 2 Shooter Speed", DEFAULT_SHOOTER_VELOCITY),
		frc::Preferences::GetInstance()->GetDouble("Zone 3 Shooter Speed", 4000),
		frc::Preferences::GetInstance()->GetDouble("Zone 4 Shooter Speed", 4000)
		};

	ShooterConfiguration configuration;

	void SetShooterConfiguration(ShooterConfiguration config);
	ShooterConfiguration GetShooterConfiguration();
	void SetCustomShooterConfiguration(double hood_position_mm, double flywheel_rpm);


	// Logging methods
	void EnableLogging();
	void DisableLogging();

};
