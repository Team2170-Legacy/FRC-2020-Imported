// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#pragma once

#include "frc2/command/SubsystemBase.h"
#include "frc/Preferences.h"
#include "hwcfg.h"
#include "frc/smartdashboard/SmartDashboard.h"
#include "networktables/NetworkTable.h"
#include "networktables/NetworkTableEntry.h"
#include "networktables/NetworkTableInstance.h"
#include "networktables/EntryListenerFlags.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "frc/Compressor.h"
#include "frc/PowerDistributionPanel.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "rev/CANSparkMax.h"
#include <frc/drive/DifferentialDrive.h>
#include <frc/kinematics/DifferentialDriveOdometry.h>
#include <frc/geometry/Pose2d.h>
#include <frc/ADXRS450_Gyro.h>
#include <frc/geometry/Rotation2d.h>
#include <units/length.h>
#include "DataLogger.h"
#include "hwcfg.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class DriveTrain: public frc2::SubsystemBase {
private:
	std::shared_ptr<frc::Compressor> compressor;
	std::shared_ptr<frc::PowerDistributionPanel> powerDistributionPanel;

	rev::CANSparkMax m_leftLead{CANIDs::kLeftLeadID, rev::CANSparkMax::MotorType::kBrushless};
	rev::CANSparkMax m_leftFollow{CANIDs::kLeftFollowID, rev::CANSparkMax::MotorType::kBrushless};
	rev::CANSparkMax m_rightLead{CANIDs::kRightLeadID, rev::CANSparkMax::MotorType::kBrushless};
	rev::CANSparkMax m_rightFollow{CANIDs::kRightFollowID, rev::CANSparkMax::MotorType::kBrushless};
	rev::CANEncoder m_leftEncoder{m_leftLead.GetEncoder()};
	rev::CANEncoder m_rightEncoder{m_rightLead.GetEncoder()};
	rev::CANPIDController m_pidControllerL{m_leftLead.GetPIDController()};
	rev::CANPIDController m_pidControllerR{m_rightLead.GetPIDController()};

	const double kGearRatio = 5.95;
	const double kWheelDiameter;
	const double d = (25.75/12); 
	const bool kVoltageDrive;
	const double kRampRate;

	// PID Gains for closed-loop velocity control
	const double kP, kI, kD = 0, kIz = 0, kFF, kMaxOutput = 1, kMinOutput = -1;
	const double kPvel, kIvel, kDvel = 0.0, kFFvel;	
	const double kPpos, kIpos, kDpos = 0.0, kFFpos;	

	// Max RPM for motors
	const double maxRPM = 5600;
	const double maxFeetPerSec;
	const double maxAccelPerSec;
	const bool kGyroReverse = true;



	frc::DifferentialDrive m_Drive{m_leftLead, m_rightLead};
	frc::DifferentialDriveOdometry m_odometry{frc::Rotation2d(units::degree_t(GetHeading()))};
	frc::ADXRS450_Gyro m_gyro;

	// for data logging
	DataLogger driveTrainLogger;
	bool m_LoggingEnabled = true;
	double leftVelocityCommand = 0;
	double rightVelocityCommand = 0;

public:
DriveTrain();
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// drive control methods
	void VelocityArcadeDrive(double xSpeed, double zRotation, bool squaredInputs = true);
	void ArcadeDrive(double xSpeed, double zRotation, bool squaredInputs = true);
	void AutoVelocityArcadeDrive(double xSpeed, double zRotation);
	void SetWheelVolts(double left, double right);
	void SetWheelVolts(double voltage);
	void SetWheelVelocity(double left, double right, int pidSlot = 0);
	void SetWheelVelocity(double velocity, int pidSlot = 0);
	void SetWheelVelocity(units::meters_per_second_t left, units::meters_per_second_t right, int pidSlot=0);
	void SetWheelPosition(double left, double right, int pidSlot = 0);
	void SetWheelPosition(units::meter_t left, units::meter_t right, int pidSlot = 0);

	// odometry/kinematics
	void ResetEncoders();
	double GetAverageEncoderDistance();
	void SetMaxOutput(double maxOutput);
	double GetHeading();
	double GetTurnRate();
	void InitDefaultCommand();
	frc::Pose2d GetPose();
	frc::DifferentialDriveWheelSpeeds GetWheelSpeeds();
	void ResetOdometry(frc::Pose2d pose);
	void EnableLogging();
	void DisableLogging();

	enum GainSelect {
		kDriverVelocity = 0, 
		kAutoVelocity = 1, 
		kAutoPosition = 2
	};

	void sendProperLEDCode(double leftSpeed, double rightSpeed, double rotateValue);

};
